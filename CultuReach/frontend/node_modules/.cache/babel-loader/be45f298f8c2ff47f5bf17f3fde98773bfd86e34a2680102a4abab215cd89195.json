{"ast":null,"code":"var _jsxFileName = \"/Users/mnrj/src/cultureach/CultuReach/CultuReach/frontend/src/components/CultureSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './CultureSelector.css';\n\n// Placeholder imports - replace these with actual image paths\nimport portugueseFlag from './img/portugalFlag.png';\nimport brazilianFlag from './img/brazilFlag.png';\nimport indianFlag from './img/indiaFlag.png';\nimport chineseFlag from './img/chinaFlag.png';\nimport japaneseFlag from './img/japanFlag.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CultureSelector() {\n  _s();\n  const [userLocation, setUserLocation] = useState('your location');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch user's location using the Geolocation API\n        const position = await new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(resolve, reject);\n        });\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Use Google Maps Geocoding API to get location details\n        const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyC3TXUA_HI7r1hjRq6aX4qpw3ImM_liY34`);\n        const locationData = response.data.results && response.data.results[0];\n        if (locationData) {\n          const town = locationData.address_components.find(component => component.types.includes('locality'));\n          setUserLocation(town ? town.long_name : 'your location');\n        } else {\n          console.error('Geocoding API response does not have expected structure:', response.data);\n        }\n      } catch (error) {\n        console.error('Error getting user location:', error.message);\n        setUserLocation('your location');\n      }\n    };\n    fetchData();\n  }, []);\n  const cultures = [{\n    name: 'Portuguese',\n    flag: portugueseFlag\n  }, {\n    name: 'Brazilian',\n    flag: brazilianFlag\n  }, {\n    name: 'Indian',\n    flag: indianFlag\n  }, {\n    name: 'Chinese',\n    flag: chineseFlag\n  }, {\n    name: 'Japanese',\n    flag: japaneseFlag\n  }\n  // Add more cultures as needed\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"culture-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Popular Cultures near \", userLocation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"culture-selector\",\n      children: cultures.map((culture, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"culture-button\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: culture.flag,\n          alt: `${culture.name} flag`,\n          className: \"culture-flag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: culture.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(CultureSelector, \"OFMUBOWKPBzEtLLRzlOKoEz74jo=\");\n_c = CultureSelector;\nexport default CultureSelector;\nvar _c;\n$RefreshReg$(_c, \"CultureSelector\");","map":{"version":3,"names":["React","useEffect","useState","axios","portugueseFlag","brazilianFlag","indianFlag","chineseFlag","japaneseFlag","jsxDEV","_jsxDEV","CultureSelector","_s","userLocation","setUserLocation","fetchData","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","latitude","longitude","coords","response","get","locationData","data","results","town","address_components","find","component","types","includes","long_name","console","error","message","cultures","name","flag","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","culture","index","src","alt","_c","$RefreshReg$"],"sources":["/Users/mnrj/src/cultureach/CultuReach/CultuReach/frontend/src/components/CultureSelector.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './CultureSelector.css';\n\n// Placeholder imports - replace these with actual image paths\nimport portugueseFlag from './img/portugalFlag.png';\nimport brazilianFlag from './img/brazilFlag.png';\nimport indianFlag from './img/indiaFlag.png';\nimport chineseFlag from './img/chinaFlag.png';\nimport japaneseFlag from './img/japanFlag.png';\n\nfunction CultureSelector() {\n  const [userLocation, setUserLocation] = useState('your location');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch user's location using the Geolocation API\n        const position = await new Promise((resolve, reject) => {\n          navigator.geolocation.getCurrentPosition(resolve, reject);\n        });\n\n        const { latitude, longitude } = position.coords;\n\n        // Use Google Maps Geocoding API to get location details\n        const response = await axios.get(\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyC3TXUA_HI7r1hjRq6aX4qpw3ImM_liY34`\n        );\n\n        const locationData = response.data.results && response.data.results[0];\n\n        if (locationData) {\n          const town = locationData.address_components.find((component) =>\n            component.types.includes('locality')\n          );\n          setUserLocation(town ? town.long_name : 'your location');\n        } else {\n          console.error('Geocoding API response does not have expected structure:', response.data);\n        }\n      } catch (error) {\n        console.error('Error getting user location:', error.message);\n        setUserLocation('your location');\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const cultures = [\n    { name: 'Portuguese', flag: portugueseFlag },\n    { name: 'Brazilian', flag: brazilianFlag },\n    { name: 'Indian', flag: indianFlag },\n    { name: 'Chinese', flag: chineseFlag },\n    { name: 'Japanese', flag: japaneseFlag },\n    // Add more cultures as needed\n  ];\n\n  return (\n    <div>\n      <header className=\"culture-header\">\n        <h2>Popular Cultures near {userLocation}</h2>\n      </header>\n      <div className=\"culture-selector\">\n        {cultures.map((culture, index) => (\n          <div className=\"culture-button\" key={index}>\n            <img src={culture.flag} alt={`${culture.name} flag`} className=\"culture-flag\" />\n            <span>{culture.name}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CultureSelector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}