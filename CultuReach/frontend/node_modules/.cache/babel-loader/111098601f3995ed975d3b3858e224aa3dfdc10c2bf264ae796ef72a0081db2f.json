{"ast":null,"code":"var _jsxFileName = \"/Users/mnrj/src/cultureach/CultuReach/CultuReach/frontend/src/EventExpand.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport './EventExpand.css'; // Assume you will create a corresponding CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventExpand = () => {\n  _s();\n  let {\n    id\n  } = useParams(); // This hook allows you to grab the event ID from the URL\n  const event = {\n    title: \"Exploring Banff National Park\",\n    image: mockEvent1,\n    place: \"Banff National Park\",\n    host: \"AMC Worcester 3RD\",\n    time: \"Wed, Feb 21 - 6:30 PM EST\",\n    going: 8,\n    price: \"Free\"\n  }; // Replace with event data fetching logic based on the ID\n\n  // Fetch the event details from your data source (API, state management, etc.)\n  // using the `id`. For now, we'll use an empty object.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-expand\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: event.image,\n      alt: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hosted by: \", event.host]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date & Time: \", event.time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Location: \", event.location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: event.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(EventExpand, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = EventExpand;\nexport default EventExpand;\nvar _c;\n$RefreshReg$(_c, \"EventExpand\");","map":{"version":3,"names":["React","useParams","jsxDEV","_jsxDEV","EventExpand","_s","id","event","title","image","mockEvent1","place","host","time","going","price","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","location","description","_c","$RefreshReg$"],"sources":["/Users/mnrj/src/cultureach/CultuReach/CultuReach/frontend/src/EventExpand.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport './EventExpand.css'; // Assume you will create a corresponding CSS file\n\nconst EventExpand = () => {\n  let { id } = useParams(); // This hook allows you to grab the event ID from the URL\n  const event =  {\n    title: \"Exploring Banff National Park\",\n    image: mockEvent1,\n    place: \"Banff National Park\",\n    host: \"AMC Worcester 3RD\",\n    time: \"Wed, Feb 21 - 6:30 PM EST\",\n    going: 8,\n    price: \"Free\",\n  }; // Replace with event data fetching logic based on the ID\n\n  // Fetch the event details from your data source (API, state management, etc.)\n  // using the `id`. For now, we'll use an empty object.\n\n  return (\n    <div className=\"event-expand\">\n      <h1>{event.title}</h1>\n      {/* Replace the placeholders with actual event data */}\n      <img src={event.image} alt={event.title} />\n      <p>Hosted by: {event.host}</p>\n      <p>Date & Time: {event.time}</p>\n      <p>Location: {event.location}</p>\n      <p>{event.description}</p>\n      {/* ... Add more event details ... */}\n    </div>\n  );\n};\n\nexport default EventExpand;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,IAAI;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;EAC1B,MAAMM,KAAK,GAAI;IACbC,KAAK,EAAE,+BAA+B;IACtCC,KAAK,EAAEC,UAAU;IACjBC,KAAK,EAAE,qBAAqB;IAC5BC,IAAI,EAAE,mBAAmB;IACzBC,IAAI,EAAE,2BAA2B;IACjCC,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE;EACT,CAAC,CAAC,CAAC;;EAEH;EACA;;EAEA,oBACEZ,OAAA;IAAKa,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3Bd,OAAA;MAAAc,QAAA,EAAKV,KAAK,CAACC;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEtBlB,OAAA;MAAKmB,GAAG,EAAEf,KAAK,CAACE,KAAM;MAACc,GAAG,EAAEhB,KAAK,CAACC;IAAM;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3ClB,OAAA;MAAAc,QAAA,GAAG,aAAW,EAACV,KAAK,CAACK,IAAI;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BlB,OAAA;MAAAc,QAAA,GAAG,eAAa,EAACV,KAAK,CAACM,IAAI;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChClB,OAAA;MAAAc,QAAA,GAAG,YAAU,EAACV,KAAK,CAACiB,QAAQ;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjClB,OAAA;MAAAc,QAAA,EAAIV,KAAK,CAACkB;IAAW;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEvB,CAAC;AAEV,CAAC;AAAChB,EAAA,CA3BID,WAAW;EAAA,QACFH,SAAS;AAAA;AAAAyB,EAAA,GADlBtB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}